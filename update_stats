#!/usr/bin/env ruby

if File.exist?("./ctf.db") && ENV.fetch("DROP", false) == "true"
  File.delete("./ctf.db")
  puts "===DELETED DB==="
end

require "bundler/inline"
require "date"

gemfile do
  source "https://rubygems.org"

  gem "activerecord", require: "active_record"
  gem "front_matter_parser", require: true
  gem "pry", require: true
  gem "sqlite3", require: true
end

ActiveRecord::Base.logger = Logger.new($stdout)
ActiveRecord::Base.establish_connection(
  adapter: "sqlite3",
  database: "ctf.db"
)

ActiveRecord::Schema.define do
  create_table :writeups, if_not_exists: true do |table|
    table.references :ctf, null: false
    table.text :name, null: false
    table.text :url, null: false
    table.timestamp :captured
    table.boolean :competition, default: false
    table.text :flag
    table.text :summary
    table.timestamps
  end

  create_table :ctfs, if_not_exists: true do |table|
    table.text :name, unique: true
    table.text :description
    table.text :url
    table.timestamps
  end

  create_table :tools, if_not_exists: true do |table|
    table.text :name, unique: true
    table.text :description
    table.text :url
    table.timestamps
  end

  create_table :categories, if_not_exists: true do |table|
    table.text :name, unique: true
    table.text :description
    table.text :url
    table.timestamps
  end

  create_join_table :writeups, :tools, if_not_exists: true
  create_join_table :writeups, :categories, if_not_exists: true
end

class Writeup < ActiveRecord::Base
  belongs_to :ctf, class_name: :CTF
  has_and_belongs_to_many :tools
  has_and_belongs_to_many :categories
end

class CTF < ActiveRecord::Base
  self.table_name = :ctfs
  has_many :writeups
end

class Tool < ActiveRecord::Base
  has_and_belongs_to_many :writeups
end

class Category < ActiveRecord::Base
  has_and_belongs_to_many :writeups
end

files = Dir["./writeups/**/*.md"]
binding.pry
files.each do |file|
  front_matter = FrontMatterParser::Parser.parse_file(
    file,
    loader: FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Date])
  ).front_matter
  ctf = CTF.find_or_create_by(name: front_matter["ctf"])
  tools = front_matter["tools"].map do |tool|
    Tool.find_or_initialize_by(name: tool)
  end
  categories = front_matter["categories"].map do |category|
    Category.find_or_initialize_by(name: category)
  end
  writeup = Writeup.create(
    ctf: ctf,
    tools: tools,
    categories: categories,
    name: file,
    url: front_matter["url"],
    captured: front_matter["captured"],
    flag: front_matter["flag"],
    competition: front_matter["competition"],
    flag: front_matter["flag"],
    summary: front_matter["summary"]
  ).save!
end
